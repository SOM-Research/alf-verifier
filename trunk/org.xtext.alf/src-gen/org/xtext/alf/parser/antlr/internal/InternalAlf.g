/*
* generated by Xtext
*/
grammar InternalAlf;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.alf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.alf.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.alf.services.AlfGrammarAccess;

}

@parser::members {

 	private AlfGrammarAccess grammarAccess;
 	
    public InternalAlfParser(TokenStream input, IAstFactory factory, AlfGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/alf/parser/antlr/internal/InternalAlf.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Operations";	
   	}
   	
   	@Override
   	protected AlfGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleOperations
entryRuleOperations returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationsRule(), currentNode); }
	 iv_ruleOperations=ruleOperations 
	 { $current=$iv_ruleOperations.current; } 
	 EOF 
;

// Rule Operations
ruleOperations returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_imports_0_0=RULE_IMPORT_ID
		{
			createLeafNode(grammarAccess.getOperationsAccess().getImportsIMPORT_IDTerminalRuleCall_0_0_0(), "imports"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"imports",
	        		lv_imports_0_0, 
	        		"IMPORT_ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getOperationsAccess().getSemicolonKeyword_0_1(), null); 
    }
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationsAccess().getOperationsOperationDefinitionOrStubParserRuleCall_1_0(), currentNode); 
	    }
		lv_operations_2_0=ruleOperationDefinitionOrStub		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"operations",
	        		lv_operations_2_0, 
	        		"OperationDefinitionOrStub", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleOperationDefinitionOrStub
entryRuleOperationDefinitionOrStub returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationDefinitionOrStubRule(), currentNode); }
	 iv_ruleOperationDefinitionOrStub=ruleOperationDefinitionOrStub 
	 { $current=$iv_ruleOperationDefinitionOrStub.current; } 
	 EOF 
;

// Rule OperationDefinitionOrStub
ruleOperationDefinitionOrStub returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDefinitionOrStubAccess().getDeclarationOperationDeclarationParserRuleCall_0_0(), currentNode); 
	    }
		lv_declaration_0_0=ruleOperationDeclaration		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDefinitionOrStubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"declaration",
	        		lv_declaration_0_0, 
	        		"OperationDeclaration", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	';' 
    {
        createLeafNode(grammarAccess.getOperationDefinitionOrStubAccess().getSemicolonKeyword_1_0(), null); 
    }

    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDefinitionOrStubAccess().getBodyBlockParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_body_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDefinitionOrStubRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_2_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleOperationDeclaration
entryRuleOperationDeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationDeclarationRule(), currentNode); }
	 iv_ruleOperationDeclaration=ruleOperationDeclaration 
	 { $current=$iv_ruleOperationDeclaration.current; } 
	 EOF 
;

// Rule OperationDeclaration
ruleOperationDeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'activity' 
    {
        createLeafNode(grammarAccess.getOperationDeclarationAccess().getActivityKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDeclarationAccess().getFormalParametersFormalParametersParserRuleCall_2_0(), currentNode); 
	    }
		lv_formalParameters_2_0=ruleFormalParameters		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formalParameters",
	        		lv_formalParameters_2_0, 
	        		"FormalParameters", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getOperationDeclarationAccess().getColonKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDeclarationAccess().getReturnTypeTypePartParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_returnType_4_0=ruleTypePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_4_0, 
	        		"TypePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationDeclarationAccess().getRedefinitionRedefinitionClauseParserRuleCall_4_0(), currentNode); 
	    }
		lv_redefinition_5_0=ruleRedefinitionClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"redefinition",
	        		lv_redefinition_5_0, 
	        		"RedefinitionClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleFormalParameters
entryRuleFormalParameters returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFormalParametersRule(), currentNode); }
	 iv_ruleFormalParameters=ruleFormalParameters 
	 { $current=$iv_ruleFormalParameters.current; } 
	 EOF 
;

// Rule FormalParameters
ruleFormalParameters returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFormalParametersAccess().getFormalParametersAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFormalParametersAccess().getFormalParametersAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getFormalParametersAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParametersAccess().getFormalParameterListFormalParameterListParserRuleCall_2_0(), currentNode); 
	    }
		lv_formalParameterList_2_0=ruleFormalParameterList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParametersRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formalParameterList",
	        		lv_formalParameterList_2_0, 
	        		"FormalParameterList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getFormalParametersAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFormalParameterList
entryRuleFormalParameterList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFormalParameterListRule(), currentNode); }
	 iv_ruleFormalParameterList=ruleFormalParameterList 
	 { $current=$iv_ruleFormalParameterList.current; } 
	 EOF 
;

// Rule FormalParameterList
ruleFormalParameterList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterFormalParameterParserRuleCall_0_0(), currentNode); 
	    }
		lv_formalParameter_0_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"formalParameter",
	        		lv_formalParameter_0_0, 
	        		"FormalParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFormalParameterListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParameterListAccess().getFormalParameterFormalParameterParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_formalParameter_2_0=ruleFormalParameter		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParameterListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"formalParameter",
	        		lv_formalParameter_2_0, 
	        		"FormalParameter", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleFormalParameter
entryRuleFormalParameter returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFormalParameterRule(), currentNode); }
	 iv_ruleFormalParameter=ruleFormalParameter 
	 { $current=$iv_ruleFormalParameter.current; } 
	 EOF 
;

// Rule FormalParameter
ruleFormalParameter returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParameterAccess().getDirectionParameterDirectionEnumRuleCall_0_0(), currentNode); 
	    }
		lv_direction_0_0=ruleParameterDirection		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"direction",
	        		lv_direction_0_0, 
	        		"ParameterDirection", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFormalParameterAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getFormalParameterAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParameterAccess().getTypeTypePartParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleTypePart		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParameterRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"TypePart", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTypePart
entryRuleTypePart returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypePartRule(), currentNode); }
	 iv_ruleTypePart=ruleTypePart 
	 { $current=$iv_ruleTypePart.current; } 
	 EOF 
;

// Rule TypePart
ruleTypePart returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypePartAccess().getTypeNameTypeNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_typeName_0_0=ruleTypeName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeName",
	        		lv_typeName_0_0, 
	        		"TypeName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypePartAccess().getMultiplicityMultiplicityParserRuleCall_1_0(), currentNode); 
	    }
		lv_multiplicity_1_0=ruleMultiplicity		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypePartRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"multiplicity",
	        		lv_multiplicity_1_0, 
	        		"Multiplicity", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleMultiplicity
entryRuleMultiplicity returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicityRule(), currentNode); }
	 iv_ruleMultiplicity=ruleMultiplicity 
	 { $current=$iv_ruleMultiplicity.current; } 
	 EOF 
;

// Rule Multiplicity
ruleMultiplicity returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getMultiplicityAccess().getMultiplicityAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicityAccess().getMultiplicityAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getLeftSquareBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicityAccess().getRangeMultiplicityRangeParserRuleCall_2_0(), currentNode); 
	    }
		lv_range_2_0=ruleMultiplicityRange		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"range",
	        		lv_range_2_0, 
	        		"MultiplicityRange", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	']' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getRightSquareBracketKeyword_3(), null); 
    }
(((
(
		lv_ordered_4_0=	'ordered' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getOrderedOrderedKeyword_4_0_0_0(), "ordered"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ordered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_nonUnique_5_0=	'nonUnique' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getNonUniqueNonUniqueKeyword_4_0_1_0(), "nonUnique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nonUnique", true, "nonUnique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
    |((
(
		lv_nonUnique_6_0=	'nonUnique' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getNonUniqueNonUniqueKeyword_4_1_0_0(), "nonUnique"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "nonUnique", true, "nonUnique", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_ordered_7_0=	'ordered' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getOrderedOrderedKeyword_4_1_1_0(), "ordered"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "ordered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?)
    |(
(
		lv_sequence_8_0=	'sequence' 
    {
        createLeafNode(grammarAccess.getMultiplicityAccess().getSequenceSequenceKeyword_4_2_0(), "sequence"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "sequence", true, "sequence", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleMultiplicityRange
entryRuleMultiplicityRange returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicityRangeRule(), currentNode); }
	 iv_ruleMultiplicityRange=ruleMultiplicityRange 
	 { $current=$iv_ruleMultiplicityRange.current; } 
	 EOF 
;

// Rule MultiplicityRange
ruleMultiplicityRange returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicityRangeAccess().getLowerNUMBER_LITERAL_WITHOUT_SUFFIXParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_lower_0_0=ruleNUMBER_LITERAL_WITHOUT_SUFFIX		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lower",
	        		lv_lower_0_0, 
	        		"NUMBER_LITERAL_WITHOUT_SUFFIX", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getMultiplicityRangeAccess().getFullStopFullStopKeyword_0_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicityRangeAccess().getUpperNUMBER_LITERAL_WITHOUT_SUFFIXParserRuleCall_1_0(), currentNode); 
	    }
		lv_upper_2_0=ruleNUMBER_LITERAL_WITHOUT_SUFFIX		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicityRangeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"upper",
	        		lv_upper_2_0, 
	        		"NUMBER_LITERAL_WITHOUT_SUFFIX", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNUMBER_LITERAL_WITHOUT_SUFFIX
entryRuleNUMBER_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBER_LITERAL_WITHOUT_SUFFIXRule(), currentNode); }
	 iv_ruleNUMBER_LITERAL_WITHOUT_SUFFIX=ruleNUMBER_LITERAL_WITHOUT_SUFFIX 
	 { $current=$iv_ruleNUMBER_LITERAL_WITHOUT_SUFFIX.current; } 
	 EOF 
;

// Rule NUMBER_LITERAL_WITHOUT_SUFFIX
ruleNUMBER_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNUMBER_LITERAL_WITHOUT_SUFFIXAccess().getINTEGER_LITERAL_WITHOUT_SUFFIXParserRuleCall_0(), currentNode); 
    }
    this_INTEGER_LITERAL_WITHOUT_SUFFIX_0=ruleINTEGER_LITERAL_WITHOUT_SUFFIX
    { 
        $current = $this_INTEGER_LITERAL_WITHOUT_SUFFIX_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNUMBER_LITERAL_WITHOUT_SUFFIXAccess().getUNLIMITED_LITERAL_WITHOUT_SUFFIXParserRuleCall_1(), currentNode); 
    }
    this_UNLIMITED_LITERAL_WITHOUT_SUFFIX_1=ruleUNLIMITED_LITERAL_WITHOUT_SUFFIX
    { 
        $current = $this_UNLIMITED_LITERAL_WITHOUT_SUFFIX_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleINTEGER_LITERAL_WITHOUT_SUFFIX
entryRuleINTEGER_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGER_LITERAL_WITHOUT_SUFFIXRule(), currentNode); }
	 iv_ruleINTEGER_LITERAL_WITHOUT_SUFFIX=ruleINTEGER_LITERAL_WITHOUT_SUFFIX 
	 { $current=$iv_ruleINTEGER_LITERAL_WITHOUT_SUFFIX.current; } 
	 EOF 
;

// Rule INTEGER_LITERAL_WITHOUT_SUFFIX
ruleINTEGER_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=RULE_INTEGERVALUE
		{
			createLeafNode(grammarAccess.getINTEGER_LITERAL_WITHOUT_SUFFIXAccess().getValueIntegerValueTerminalRuleCall_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getINTEGER_LITERAL_WITHOUT_SUFFIXRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"IntegerValue", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleUNLIMITED_LITERAL_WITHOUT_SUFFIX
entryRuleUNLIMITED_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUNLIMITED_LITERAL_WITHOUT_SUFFIXRule(), currentNode); }
	 iv_ruleUNLIMITED_LITERAL_WITHOUT_SUFFIX=ruleUNLIMITED_LITERAL_WITHOUT_SUFFIX 
	 { $current=$iv_ruleUNLIMITED_LITERAL_WITHOUT_SUFFIX.current; } 
	 EOF 
;

// Rule UNLIMITED_LITERAL_WITHOUT_SUFFIX
ruleUNLIMITED_LITERAL_WITHOUT_SUFFIX returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_value_0_0=	'*' 
    {
        createLeafNode(grammarAccess.getUNLIMITED_LITERAL_WITHOUT_SUFFIXAccess().getValueAsteriskKeyword_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUNLIMITED_LITERAL_WITHOUT_SUFFIXRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeNameRule(), currentNode); }
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current; } 
	 EOF 
;

// Rule TypeName
ruleTypeName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTypeNameAccess().getTypeNameAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTypeNameAccess().getTypeNameAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedNameQualifiedNameWithBindingParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_qualifiedName_1_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedName",
	        		lv_qualifiedName_1_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |	'any' 
    {
        createLeafNode(grammarAccess.getTypeNameAccess().getAnyKeyword_1_1(), null); 
    }
))
;





// Entry rule entryRuleRedefinitionClause
entryRuleRedefinitionClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRedefinitionClauseRule(), currentNode); }
	 iv_ruleRedefinitionClause=ruleRedefinitionClause 
	 { $current=$iv_ruleRedefinitionClause.current; } 
	 EOF 
;

// Rule RedefinitionClause
ruleRedefinitionClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'redefines' 
    {
        createLeafNode(grammarAccess.getRedefinitionClauseAccess().getRedefinesKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRedefinitionClauseAccess().getRedefinedOperationsQualifiedNameListParserRuleCall_1_0(), currentNode); 
	    }
		lv_redefinedOperations_1_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRedefinitionClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"redefinedOperations",
	        		lv_redefinedOperations_1_0, 
	        		"QualifiedNameList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;







// Entry rule entryRuleLITERAL
entryRuleLITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLITERALRule(), currentNode); }
	 iv_ruleLITERAL=ruleLITERAL 
	 { $current=$iv_ruleLITERAL.current; } 
	 EOF 
;

// Rule LITERAL
ruleLITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getLITERALAccess().getBOOLEAN_LITERALParserRuleCall_0(), currentNode); 
    }
    this_BOOLEAN_LITERAL_0=ruleBOOLEAN_LITERAL
    { 
        $current = $this_BOOLEAN_LITERAL_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLITERALAccess().getNUMBER_LITERALParserRuleCall_1(), currentNode); 
    }
    this_NUMBER_LITERAL_1=ruleNUMBER_LITERAL
    { 
        $current = $this_NUMBER_LITERAL_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getLITERALAccess().getSTRING_LITERALParserRuleCall_2(), currentNode); 
    }
    this_STRING_LITERAL_2=ruleSTRING_LITERAL
    { 
        $current = $this_STRING_LITERAL_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBOOLEAN_LITERAL
entryRuleBOOLEAN_LITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBOOLEAN_LITERALRule(), currentNode); }
	 iv_ruleBOOLEAN_LITERAL=ruleBOOLEAN_LITERAL 
	 { $current=$iv_ruleBOOLEAN_LITERAL.current; } 
	 EOF 
;

// Rule BOOLEAN_LITERAL
ruleBOOLEAN_LITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBOOLEAN_LITERALAccess().getValueBooleanValueEnumRuleCall_0_0(), currentNode); 
	    }
		lv_value_0_0=ruleBooleanValue		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBOOLEAN_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"BooleanValue", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBOOLEAN_LITERALAccess().getSuffixSuffixExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_suffix_1_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBOOLEAN_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_1_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBER_LITERALRule(), currentNode); }
	 iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL 
	 { $current=$iv_ruleNUMBER_LITERAL.current; } 
	 EOF 
;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNUMBER_LITERALAccess().getINTEGER_LITERALParserRuleCall_0(), currentNode); 
    }
    this_INTEGER_LITERAL_0=ruleINTEGER_LITERAL
    { 
        $current = $this_INTEGER_LITERAL_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNUMBER_LITERALAccess().getUNLIMITED_LITERALParserRuleCall_1(), currentNode); 
    }
    this_UNLIMITED_LITERAL_1=ruleUNLIMITED_LITERAL
    { 
        $current = $this_UNLIMITED_LITERAL_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleINTEGER_LITERAL
entryRuleINTEGER_LITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getINTEGER_LITERALRule(), currentNode); }
	 iv_ruleINTEGER_LITERAL=ruleINTEGER_LITERAL 
	 { $current=$iv_ruleINTEGER_LITERAL.current; } 
	 EOF 
;

// Rule INTEGER_LITERAL
ruleINTEGER_LITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_INTEGERVALUE
		{
			createLeafNode(grammarAccess.getINTEGER_LITERALAccess().getValueIntegerValueTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getINTEGER_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"IntegerValue", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getINTEGER_LITERALAccess().getSuffixSuffixExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_suffix_1_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getINTEGER_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_1_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleUNLIMITED_LITERAL
entryRuleUNLIMITED_LITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUNLIMITED_LITERALRule(), currentNode); }
	 iv_ruleUNLIMITED_LITERAL=ruleUNLIMITED_LITERAL 
	 { $current=$iv_ruleUNLIMITED_LITERAL.current; } 
	 EOF 
;

// Rule UNLIMITED_LITERAL
ruleUNLIMITED_LITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=	'*' 
    {
        createLeafNode(grammarAccess.getUNLIMITED_LITERALAccess().getValueAsteriskKeyword_0_0(), "value"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUNLIMITED_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "value", lv_value_0_0, "*", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUNLIMITED_LITERALAccess().getSuffixSuffixExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_suffix_1_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUNLIMITED_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_1_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSTRING_LITERAL
entryRuleSTRING_LITERAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSTRING_LITERALRule(), currentNode); }
	 iv_ruleSTRING_LITERAL=ruleSTRING_LITERAL 
	 { $current=$iv_ruleSTRING_LITERAL.current; } 
	 EOF 
;

// Rule STRING_LITERAL
ruleSTRING_LITERAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getSTRING_LITERALAccess().getValueSTRINGTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSTRING_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSTRING_LITERALAccess().getSuffixSuffixExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_suffix_1_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSTRING_LITERALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_1_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleNameExpression
entryRuleNameExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameExpressionRule(), currentNode); }
	 iv_ruleNameExpression=ruleNameExpression 
	 { $current=$iv_ruleNameExpression.current; } 
	 EOF 
;

// Rule NameExpression
ruleNameExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((
(
(
		lv_prefixOp_0_1=	'++' 
    {
        createLeafNode(grammarAccess.getNameExpressionAccess().getPrefixOpPlusSignPlusSignKeyword_0_0_0_0_0(), "prefixOp"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "prefixOp", lv_prefixOp_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_prefixOp_0_2=	'--' 
    {
        createLeafNode(grammarAccess.getNameExpressionAccess().getPrefixOpHyphenMinusHyphenMinusKeyword_0_0_0_0_1(), "prefixOp"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "prefixOp", lv_prefixOp_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpressionAccess().getPathQualifiedNamePathParserRuleCall_0_0_1_0(), currentNode); 
	    }
		lv_path_1_0=ruleQualifiedNamePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_1_0, 
	        		"QualifiedNamePath", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_id_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNameExpressionAccess().getIdIDTerminalRuleCall_0_0_2_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpressionAccess().getPathQualifiedNamePathParserRuleCall_0_1_0_0(), currentNode); 
	    }
		lv_path_3_0=ruleQualifiedNamePath		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"path",
	        		lv_path_3_0, 
	        		"QualifiedNamePath", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		lv_id_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNameExpressionAccess().getIdIDTerminalRuleCall_0_1_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpressionAccess().getInvocationCompletionTupleParserRuleCall_0_1_2_0_0(), currentNode); 
	    }
		lv_invocationCompletion_5_0=ruleTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"invocationCompletion",
	        		lv_invocationCompletion_5_0, 
	        		"Tuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpressionAccess().getSequenceConstructionCompletionSequenceConstructionOrAccessCompletionParserRuleCall_0_1_2_1_0(), currentNode); 
	    }
		lv_sequenceConstructionCompletion_6_0=ruleSequenceConstructionOrAccessCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequenceConstructionCompletion",
	        		lv_sequenceConstructionCompletion_6_0, 
	        		"SequenceConstructionOrAccessCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
(
		lv_postfixOp_7_1=	'++' 
    {
        createLeafNode(grammarAccess.getNameExpressionAccess().getPostfixOpPlusSignPlusSignKeyword_0_1_2_2_0_0(), "postfixOp"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "postfixOp", lv_postfixOp_7_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_postfixOp_7_2=	'--' 
    {
        createLeafNode(grammarAccess.getNameExpressionAccess().getPostfixOpHyphenMinusHyphenMinusKeyword_0_1_2_2_0_1(), "postfixOp"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "postfixOp", lv_postfixOp_7_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
))?))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpressionAccess().getSuffixSuffixExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_suffix_8_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_8_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleQualifiedNamePath
entryRuleQualifiedNamePath returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNamePathRule(), currentNode); }
	 iv_ruleQualifiedNamePath=ruleQualifiedNamePath 
	 { $current=$iv_ruleQualifiedNamePath.current; } 
	 EOF 
;

// Rule QualifiedNamePath
ruleQualifiedNamePath returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNamePathAccess().getNamespaceUnqualifiedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_namespace_0_0=ruleUnqualifiedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNamePathRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"namespace",
	        		lv_namespace_0_0, 
	        		"UnqualifiedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedNamePathAccess().getColonColonKeyword_1(), null); 
    }
)+
;





// Entry rule entryRuleUnqualifiedName
entryRuleUnqualifiedName returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnqualifiedNameRule(), currentNode); }
	 iv_ruleUnqualifiedName=ruleUnqualifiedName 
	 { $current=$iv_ruleUnqualifiedName.current; } 
	 EOF 
;

// Rule UnqualifiedName
ruleUnqualifiedName returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getUnqualifiedNameAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnqualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnqualifiedNameAccess().getTemplateBindingTemplateBindingParserRuleCall_1_0(), currentNode); 
	    }
		lv_templateBinding_1_0=ruleTemplateBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnqualifiedNameRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"templateBinding",
	        		lv_templateBinding_1_0, 
	        		"TemplateBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleTemplateBinding
entryRuleTemplateBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTemplateBindingRule(), currentNode); }
	 iv_ruleTemplateBinding=ruleTemplateBinding 
	 { $current=$iv_ruleTemplateBinding.current; } 
	 EOF 
;

// Rule TemplateBinding
ruleTemplateBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'<' 
    {
        createLeafNode(grammarAccess.getTemplateBindingAccess().getLessThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateBindingAccess().getBindingsNamedTemplateBindingParserRuleCall_1_0(), currentNode); 
	    }
		lv_bindings_1_0=ruleNamedTemplateBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"bindings",
	        		lv_bindings_1_0, 
	        		"NamedTemplateBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTemplateBindingAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTemplateBindingAccess().getBindingsNamedTemplateBindingParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_bindings_3_0=ruleNamedTemplateBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTemplateBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"bindings",
	        		lv_bindings_3_0, 
	        		"NamedTemplateBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'>' 
    {
        createLeafNode(grammarAccess.getTemplateBindingAccess().getGreaterThanSignKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleNamedTemplateBinding
entryRuleNamedTemplateBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNamedTemplateBindingRule(), currentNode); }
	 iv_ruleNamedTemplateBinding=ruleNamedTemplateBinding 
	 { $current=$iv_ruleNamedTemplateBinding.current; } 
	 EOF 
;

// Rule NamedTemplateBinding
ruleNamedTemplateBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_formal_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getNamedTemplateBindingAccess().getFormalIDTerminalRuleCall_0_0(), "formal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedTemplateBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formal",
	        		lv_formal_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=>' 
    {
        createLeafNode(grammarAccess.getNamedTemplateBindingAccess().getEqualsSignGreaterThanSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNamedTemplateBindingAccess().getActualQualifiedNameWithBindingParserRuleCall_2_0(), currentNode); 
	    }
		lv_actual_2_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNamedTemplateBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"actual",
	        		lv_actual_2_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithBinding
entryRuleQualifiedNameWithBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameWithBindingRule(), currentNode); }
	 iv_ruleQualifiedNameWithBinding=ruleQualifiedNameWithBinding 
	 { $current=$iv_ruleQualifiedNameWithBinding.current; } 
	 EOF 
;

// Rule QualifiedNameWithBinding
ruleQualifiedNameWithBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_id_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getQualifiedNameWithBindingAccess().getIdIDTerminalRuleCall_0_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameWithBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameWithBindingAccess().getBindingTemplateBindingParserRuleCall_1_0(), currentNode); 
	    }
		lv_binding_1_0=ruleTemplateBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameWithBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"binding",
	        		lv_binding_1_0, 
	        		"TemplateBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedNameWithBindingAccess().getColonColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameWithBindingAccess().getRemainingQualifiedNameWithBindingParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_remaining_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameWithBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"remaining",
	        		lv_remaining_3_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleRule(), currentNode); }
	 iv_ruleTuple=ruleTuple 
	 { $current=$iv_ruleTuple.current; } 
	 EOF 
;

// Rule Tuple
ruleTuple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getTupleAccess().getTupleAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTupleAccess().getTupleAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getTupleAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleAccess().getTupleElementsTupleElementParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_tupleElements_2_0=ruleTupleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tupleElements",
	        		lv_tupleElements_2_0, 
	        		"TupleElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleAccess().getTupleElementsTupleElementParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_tupleElements_4_0=ruleTupleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"tupleElements",
	        		lv_tupleElements_4_0, 
	        		"TupleElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getTupleAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleTupleElement
entryRuleTupleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleElementRule(), currentNode); }
	 iv_ruleTupleElement=ruleTupleElement 
	 { $current=$iv_ruleTupleElement.current; } 
	 EOF 
;

// Rule TupleElement
ruleTupleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleElementAccess().getArgumentExpressionParserRuleCall_0(), currentNode); 
	    }
		lv_argument_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"argument",
	        		lv_argument_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getConditionalTestExpressionParserRuleCall(), currentNode); 
    }
    this_ConditionalTestExpression_0=ruleConditionalTestExpression
    { 
        $current = $this_ConditionalTestExpression_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleConditionalTestExpression
entryRuleConditionalTestExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalTestExpressionRule(), currentNode); }
	 iv_ruleConditionalTestExpression=ruleConditionalTestExpression 
	 { $current=$iv_ruleConditionalTestExpression.current; } 
	 EOF 
;

// Rule ConditionalTestExpression
ruleConditionalTestExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getExpConditionalOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleConditionalOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"ConditionalOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'?' 
    {
        createLeafNode(grammarAccess.getConditionalTestExpressionAccess().getQuestionMarkKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getWhenTrueConditionalTestExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_whenTrue_2_0=ruleConditionalTestExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenTrue",
	        		lv_whenTrue_2_0, 
	        		"ConditionalTestExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getConditionalTestExpressionAccess().getColonKeyword_1_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalTestExpressionAccess().getWhenFalseConditionalTestExpressionParserRuleCall_1_3_0(), currentNode); 
	    }
		lv_whenFalse_4_0=ruleConditionalTestExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalTestExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"whenFalse",
	        		lv_whenFalse_4_0, 
	        		"ConditionalTestExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleConditionalOrExpression
entryRuleConditionalOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalOrExpressionRule(), currentNode); }
	 iv_ruleConditionalOrExpression=ruleConditionalOrExpression 
	 { $current=$iv_ruleConditionalOrExpression.current; } 
	 EOF 
;

// Rule ConditionalOrExpression
ruleConditionalOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpConditionalAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"ConditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'||' 
    {
        createLeafNode(grammarAccess.getConditionalOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalOrExpressionAccess().getExpConditionalAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleConditionalAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"ConditionalAndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleConditionalAndExpression
entryRuleConditionalAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConditionalAndExpressionRule(), currentNode); }
	 iv_ruleConditionalAndExpression=ruleConditionalAndExpression 
	 { $current=$iv_ruleConditionalAndExpression.current; } 
	 EOF 
;

// Rule ConditionalAndExpression
ruleConditionalAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpInclusiveOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"InclusiveOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&&' 
    {
        createLeafNode(grammarAccess.getConditionalAndExpressionAccess().getAmpersandAmpersandKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConditionalAndExpressionAccess().getExpInclusiveOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleInclusiveOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConditionalAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"InclusiveOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleInclusiveOrExpression
entryRuleInclusiveOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInclusiveOrExpressionRule(), currentNode); }
	 iv_ruleInclusiveOrExpression=ruleInclusiveOrExpression 
	 { $current=$iv_ruleInclusiveOrExpression.current; } 
	 EOF 
;

// Rule InclusiveOrExpression
ruleInclusiveOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExpExclusiveOrExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInclusiveOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"ExclusiveOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'|' 
    {
        createLeafNode(grammarAccess.getInclusiveOrExpressionAccess().getVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInclusiveOrExpressionAccess().getExpExclusiveOrExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleExclusiveOrExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInclusiveOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"ExclusiveOrExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleExclusiveOrExpression
entryRuleExclusiveOrExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExclusiveOrExpressionRule(), currentNode); }
	 iv_ruleExclusiveOrExpression=ruleExclusiveOrExpression 
	 { $current=$iv_ruleExclusiveOrExpression.current; } 
	 EOF 
;

// Rule ExclusiveOrExpression
ruleExclusiveOrExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getExpAndExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExclusiveOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'^' 
    {
        createLeafNode(grammarAccess.getExclusiveOrExpressionAccess().getCircumflexAccentKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExclusiveOrExpressionAccess().getExpAndExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExclusiveOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"AndExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getExpEqualityExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getExpEqualityExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"EqualityExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqualityExpressionRule(), currentNode); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpClassificationExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleClassificationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"ClassificationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'==' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'!=' 
    {
        createLeafNode(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqualityExpressionAccess().getExpClassificationExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleClassificationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqualityExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"ClassificationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleClassificationExpression
entryRuleClassificationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassificationExpressionRule(), currentNode); }
	 iv_ruleClassificationExpression=ruleClassificationExpression 
	 { $current=$iv_ruleClassificationExpression.current; } 
	 EOF 
;

// Rule ClassificationExpression
ruleClassificationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationExpressionAccess().getExpRelationalExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"RelationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'instanceof' 
    {
        createLeafNode(grammarAccess.getClassificationExpressionAccess().getOpInstanceofKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'hastype' 
    {
        createLeafNode(grammarAccess.getClassificationExpressionAccess().getOpHastypeKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationExpressionAccess().getTypeNameNameExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_typeName_2_0=ruleNameExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typeName",
	        		lv_typeName_2_0, 
	        		"NameExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getLeftShiftExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_left_0_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"left",
	        		lv_left_0_0, 
	        		"ShiftExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'<' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'>' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'<=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_4=	'>=' 
    {
        createLeafNode(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightShiftExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_right_2_0=ruleShiftExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_2_0, 
	        		"ShiftExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleShiftExpression
entryRuleShiftExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getShiftExpressionRule(), currentNode); }
	 iv_ruleShiftExpression=ruleShiftExpression 
	 { $current=$iv_ruleShiftExpression.current; } 
	 EOF 
;

// Rule ShiftExpression
ruleShiftExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getExpAdditiveExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'<<' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getOpLessThanSignLessThanSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getOpGreaterThanSignGreaterThanSignKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'>>>' 
    {
        createLeafNode(grammarAccess.getShiftExpressionAccess().getOpGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getShiftExpressionAccess().getExpAdditiveExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getShiftExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"AdditiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'+' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'-' 
    {
        createLeafNode(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getExpMultiplicativeExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"MultiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_exp_0_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_0_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
(
		lv_op_1_1=	'*' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_2=	'/' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_1_3=	'%' 
    {
        createLeafNode(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		add($current, "op", lv_op_1_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getExpUnaryExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_exp_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exp",
	        		lv_exp_2_0, 
	        		"UnaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_op_0_1=	'!' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpExclamationMarkKeyword_0_0_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_2=	'-' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_0_1(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_3=	'+' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_0_0_2(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_4=	'$' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpDollarSignKeyword_0_0_3(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_op_0_5=	'~' 
    {
        createLeafNode(grammarAccess.getUnaryExpressionAccess().getOpTildeKeyword_0_0_4(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_0_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpPrimaryExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_exp_1_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"exp",
	        		lv_exp_1_0, 
	        		"PrimaryExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpressionRule(), currentNode); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPrefixValueSpecificationParserRuleCall_0(), currentNode); 
	    }
		lv_prefix_0_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"prefix",
	        		lv_prefix_0_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSuffixExpression
entryRuleSuffixExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSuffixExpressionRule(), currentNode); }
	 iv_ruleSuffixExpression=ruleSuffixExpression 
	 { $current=$iv_ruleSuffixExpression.current; } 
	 EOF 
;

// Rule SuffixExpression
ruleSuffixExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getOperationCallExpressionParserRuleCall_0(), currentNode); 
    }
    this_OperationCallExpression_0=ruleOperationCallExpression
    { 
        $current = $this_OperationCallExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getPropertyCallExpressionParserRuleCall_1(), currentNode); 
    }
    this_PropertyCallExpression_1=rulePropertyCallExpression
    { 
        $current = $this_PropertyCallExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getLinkOperationExpressionParserRuleCall_2(), currentNode); 
    }
    this_LinkOperationExpression_2=ruleLinkOperationExpression
    { 
        $current = $this_LinkOperationExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceOperationExpressionParserRuleCall_3(), currentNode); 
    }
    this_SequenceOperationExpression_3=ruleSequenceOperationExpression
    { 
        $current = $this_SequenceOperationExpression_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceReductionExpressionParserRuleCall_4(), currentNode); 
    }
    this_SequenceReductionExpression_4=ruleSequenceReductionExpression
    { 
        $current = $this_SequenceReductionExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSuffixExpressionAccess().getSequenceExpansionExpressionParserRuleCall_5(), currentNode); 
    }
    this_SequenceExpansionExpression_5=ruleSequenceExpansionExpression
    { 
        $current = $this_SequenceExpansionExpression_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleOperationCallExpression
entryRuleOperationCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallExpressionRule(), currentNode); }
	 iv_ruleOperationCallExpression=ruleOperationCallExpression 
	 { $current=$iv_ruleOperationCallExpression.current; } 
	 EOF 
;

// Rule OperationCallExpression
ruleOperationCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.' 
    {
        createLeafNode(grammarAccess.getOperationCallExpressionAccess().getFullStopKeyword_0(), null); 
    }
(
(
		lv_operationName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationCallExpressionAccess().getOperationNameIDTerminalRuleCall_1_0(), "operationName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operationName",
	        		lv_operationName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionAccess().getTupleTupleParserRuleCall_2_0(), currentNode); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tuple",
	        		lv_tuple_2_0, 
	        		"Tuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_suffix_3_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_3_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleOperationCallExpressionWithoutDot
entryRuleOperationCallExpressionWithoutDot returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationCallExpressionWithoutDotRule(), currentNode); }
	 iv_ruleOperationCallExpressionWithoutDot=ruleOperationCallExpressionWithoutDot 
	 { $current=$iv_ruleOperationCallExpressionWithoutDot.current; } 
	 EOF 
;

// Rule OperationCallExpressionWithoutDot
ruleOperationCallExpressionWithoutDot returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_operationName_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOperationCallExpressionWithoutDotAccess().getOperationNameIDTerminalRuleCall_0_0(), "operationName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionWithoutDotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operationName",
	        		lv_operationName_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionWithoutDotAccess().getTupleTupleParserRuleCall_1_0(), currentNode); 
	    }
		lv_tuple_1_0=ruleTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionWithoutDotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tuple",
	        		lv_tuple_1_0, 
	        		"Tuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationCallExpressionWithoutDotAccess().getSuffixSuffixExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_suffix_2_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationCallExpressionWithoutDotRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_2_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRulePropertyCallExpression
entryRulePropertyCallExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyCallExpressionRule(), currentNode); }
	 iv_rulePropertyCallExpression=rulePropertyCallExpression 
	 { $current=$iv_rulePropertyCallExpression.current; } 
	 EOF 
;

// Rule PropertyCallExpression
rulePropertyCallExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.' 
    {
        createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getFullStopKeyword_0(), null); 
    }
(
(
		lv_propertyName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getPropertyNameIDTerminalRuleCall_1_0(), "propertyName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"propertyName",
	        		lv_propertyName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'[' 
    {
        createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getLeftSquareBracketKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyCallExpressionAccess().getIndexExpressionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"index",
	        		lv_index_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getPropertyCallExpressionAccess().getRightSquareBracketKeyword_2_2(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyCallExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_suffix_5_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyCallExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_5_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleLinkOperationExpression
entryRuleLinkOperationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLinkOperationExpressionRule(), currentNode); }
	 iv_ruleLinkOperationExpression=ruleLinkOperationExpression 
	 { $current=$iv_ruleLinkOperationExpression.current; } 
	 EOF 
;

// Rule LinkOperationExpression
ruleLinkOperationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'.' 
    {
        createLeafNode(grammarAccess.getLinkOperationExpressionAccess().getFullStopKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getKindLinkOperationKindEnumRuleCall_1_0(), currentNode); 
	    }
		lv_kind_1_0=ruleLinkOperationKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_1_0, 
	        		"LinkOperationKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationExpressionAccess().getTupleLinkOperationTupleParserRuleCall_2_0(), currentNode); 
	    }
		lv_tuple_2_0=ruleLinkOperationTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tuple",
	        		lv_tuple_2_0, 
	        		"LinkOperationTuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLinkOperationTuple
entryRuleLinkOperationTuple returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLinkOperationTupleRule(), currentNode); }
	 iv_ruleLinkOperationTuple=ruleLinkOperationTuple 
	 { $current=$iv_ruleLinkOperationTuple.current; } 
	 EOF 
;

// Rule LinkOperationTuple
ruleLinkOperationTuple returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleAccess().getLeftParenthesisKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationTupleAccess().getLinkOperationTupleElementLinkOperationTupleElementParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_linkOperationTupleElement_1_0=ruleLinkOperationTupleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"linkOperationTupleElement",
	        		lv_linkOperationTupleElement_1_0, 
	        		"LinkOperationTupleElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleAccess().getCommaKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationTupleAccess().getLinkOperationTupleElementLinkOperationTupleElementParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_linkOperationTupleElement_3_0=ruleLinkOperationTupleElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationTupleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"linkOperationTupleElement",
	        		lv_linkOperationTupleElement_3_0, 
	        		"LinkOperationTupleElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleLinkOperationTupleElement
entryRuleLinkOperationTupleElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLinkOperationTupleElementRule(), currentNode); }
	 iv_ruleLinkOperationTupleElement=ruleLinkOperationTupleElement 
	 { $current=$iv_ruleLinkOperationTupleElement.current; } 
	 EOF 
;

// Rule LinkOperationTupleElement
ruleLinkOperationTupleElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_objectOrRole_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLinkOperationTupleElementAccess().getObjectOrRoleIDTerminalRuleCall_0_0(), "objectOrRole"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationTupleElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"objectOrRole",
	        		lv_objectOrRole_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((	'[' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleElementAccess().getLeftSquareBracketKeyword_1_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationTupleElementAccess().getRoleIndexExpressionParserRuleCall_1_0_1_0(), currentNode); 
	    }
		lv_roleIndex_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationTupleElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"roleIndex",
	        		lv_roleIndex_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleElementAccess().getRightSquareBracketKeyword_1_0_2(), null); 
    }
)?	'=>' 
    {
        createLeafNode(grammarAccess.getLinkOperationTupleElementAccess().getEqualsSignGreaterThanSignKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLinkOperationTupleElementAccess().getObjectValueSpecValueSpecificationParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_objectValueSpec_5_0=ruleValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLinkOperationTupleElementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"objectValueSpec",
	        		lv_objectValueSpec_5_0, 
	        		"ValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleSequenceOperationExpression
entryRuleSequenceOperationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceOperationExpressionRule(), currentNode); }
	 iv_ruleSequenceOperationExpression=ruleSequenceOperationExpression 
	 { $current=$iv_ruleSequenceOperationExpression.current; } 
	 EOF 
;

// Rule SequenceOperationExpression
ruleSequenceOperationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getSequenceOperationExpressionAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
(
(
		lv_operationName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSequenceOperationExpressionAccess().getOperationNameIDTerminalRuleCall_1_0(), "operationName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceOperationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operationName",
	        		lv_operationName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceOperationExpressionAccess().getTupleTupleParserRuleCall_2_0(), currentNode); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceOperationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tuple",
	        		lv_tuple_2_0, 
	        		"Tuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceOperationExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_suffix_3_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceOperationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_3_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSequenceReductionExpression
entryRuleSequenceReductionExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceReductionExpressionRule(), currentNode); }
	 iv_ruleSequenceReductionExpression=ruleSequenceReductionExpression 
	 { $current=$iv_ruleSequenceReductionExpression.current; } 
	 EOF 
;

// Rule SequenceReductionExpression
ruleSequenceReductionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getSequenceReductionExpressionAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
	'reduce' 
    {
        createLeafNode(grammarAccess.getSequenceReductionExpressionAccess().getReduceKeyword_1(), null); 
    }
(
(
		lv_isOrdered_2_0=	'ordered' 
    {
        createLeafNode(grammarAccess.getSequenceReductionExpressionAccess().getIsOrderedOrderedKeyword_2_0(), "isOrdered"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceReductionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "isOrdered", true, "ordered", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceReductionExpressionAccess().getBehaviorQualifiedNameWithBindingParserRuleCall_3_0(), currentNode); 
	    }
		lv_behavior_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceReductionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"behavior",
	        		lv_behavior_3_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceReductionExpressionAccess().getSuffixSuffixExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_suffix_4_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceReductionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_4_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSequenceExpansionExpression
entryRuleSequenceExpansionExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceExpansionExpressionRule(), currentNode); }
	 iv_ruleSequenceExpansionExpression=ruleSequenceExpansionExpression 
	 { $current=$iv_ruleSequenceExpansionExpression.current; } 
	 EOF 
;

// Rule SequenceExpansionExpression
ruleSequenceExpansionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getSelectOrRejectOperationParserRuleCall_0(), currentNode); 
    }
    this_SelectOrRejectOperation_0=ruleSelectOrRejectOperation
    { 
        $current = $this_SelectOrRejectOperation_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getCollectOrIterateOperationParserRuleCall_1(), currentNode); 
    }
    this_CollectOrIterateOperation_1=ruleCollectOrIterateOperation
    { 
        $current = $this_CollectOrIterateOperation_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getForAllOrExistsOrOneOperationParserRuleCall_2(), currentNode); 
    }
    this_ForAllOrExistsOrOneOperation_2=ruleForAllOrExistsOrOneOperation
    { 
        $current = $this_ForAllOrExistsOrOneOperation_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceExpansionExpressionAccess().getIsUniqueOperationParserRuleCall_3(), currentNode); 
    }
    this_IsUniqueOperation_3=ruleIsUniqueOperation
    { 
        $current = $this_IsUniqueOperation_3.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleSelectOrRejectOperation
entryRuleSelectOrRejectOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelectOrRejectOperationRule(), currentNode); }
	 iv_ruleSelectOrRejectOperation=ruleSelectOrRejectOperation 
	 { $current=$iv_ruleSelectOrRejectOperation.current; } 
	 EOF 
;

// Rule SelectOrRejectOperation
ruleSelectOrRejectOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectOrRejectOperationAccess().getOpSelectOrRejectOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_op_1_0=ruleSelectOrRejectOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_0, 
	        		"SelectOrRejectOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_expr1_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getExpr1IDTerminalRuleCall_3_0(), "expr1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr1",
	        		lv_expr1_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'|' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getVerticalLineKeyword_4(), null); 
    }
(
(
		lv_expr2_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getExpr2IDTerminalRuleCall_5_0(), "expr2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr2",
	        		lv_expr2_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getFullStopKeyword_6(), null); 
    }
(
(
		lv_expr3_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getExpr3IDTerminalRuleCall_7_0(), "expr3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr3",
	        		lv_expr3_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getEqualsSignKeyword_8(), null); 
    }
(
(
		lv_expr4_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getExpr4IDTerminalRuleCall_9_0(), "expr4"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr4",
	        		lv_expr4_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSelectOrRejectOperationAccess().getRightParenthesisKeyword_10(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSelectOrRejectOperationAccess().getSuffixSuffixExpressionParserRuleCall_11_0(), currentNode); 
	    }
		lv_suffix_11_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSelectOrRejectOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_11_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleCollectOrIterateOperation
entryRuleCollectOrIterateOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectOrIterateOperationRule(), currentNode); }
	 iv_ruleCollectOrIterateOperation=ruleCollectOrIterateOperation 
	 { $current=$iv_ruleCollectOrIterateOperation.current; } 
	 EOF 
;

// Rule CollectOrIterateOperation
ruleCollectOrIterateOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectOrIterateOperationAccess().getOpCollectOrIterateOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_op_1_0=ruleCollectOrIterateOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_0, 
	        		"CollectOrIterateOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_expr1_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getExpr1IDTerminalRuleCall_3_0(), "expr1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr1",
	        		lv_expr1_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'|' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getVerticalLineKeyword_4(), null); 
    }
(
(
		lv_expr2_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getExpr2IDTerminalRuleCall_5_0(), "expr2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr2",
	        		lv_expr2_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getFullStopKeyword_6(), null); 
    }
(
(
		lv_expr3_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getExpr3IDTerminalRuleCall_7_0(), "expr3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr3",
	        		lv_expr3_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getEqualsSignKeyword_8(), null); 
    }
(
(
		lv_expr4_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getExpr4IDTerminalRuleCall_9_0(), "expr4"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr4",
	        		lv_expr4_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCollectOrIterateOperationAccess().getRightParenthesisKeyword_10(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectOrIterateOperationAccess().getSuffixSuffixExpressionParserRuleCall_11_0(), currentNode); 
	    }
		lv_suffix_11_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectOrIterateOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_11_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleForAllOrExistsOrOneOperation
entryRuleForAllOrExistsOrOneOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationRule(), currentNode); }
	 iv_ruleForAllOrExistsOrOneOperation=ruleForAllOrExistsOrOneOperation 
	 { $current=$iv_ruleForAllOrExistsOrOneOperation.current; } 
	 EOF 
;

// Rule ForAllOrExistsOrOneOperation
ruleForAllOrExistsOrOneOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getOpForAllOrExistsOrOneOperatorEnumRuleCall_1_0(), currentNode); 
	    }
		lv_op_1_0=ruleForAllOrExistsOrOneOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_0, 
	        		"ForAllOrExistsOrOneOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_expr1_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getExpr1IDTerminalRuleCall_3_0(), "expr1"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr1",
	        		lv_expr1_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'|' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getVerticalLineKeyword_4(), null); 
    }
(
(
		lv_expr2_5_0=RULE_ID
		{
			createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getExpr2IDTerminalRuleCall_5_0(), "expr2"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr2",
	        		lv_expr2_5_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getFullStopKeyword_6(), null); 
    }
(
(
		lv_expr3_7_0=RULE_ID
		{
			createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getExpr3IDTerminalRuleCall_7_0(), "expr3"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr3",
	        		lv_expr3_7_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getEqualsSignKeyword_8(), null); 
    }
(
(
		lv_expr4_9_0=RULE_ID
		{
			createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getExpr4IDTerminalRuleCall_9_0(), "expr4"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr4",
	        		lv_expr4_9_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getRightParenthesisKeyword_10(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForAllOrExistsOrOneOperationAccess().getSuffixSuffixExpressionParserRuleCall_11_0(), currentNode); 
	    }
		lv_suffix_11_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForAllOrExistsOrOneOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_11_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleIsUniqueOperation
entryRuleIsUniqueOperation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIsUniqueOperationRule(), currentNode); }
	 iv_ruleIsUniqueOperation=ruleIsUniqueOperation 
	 { $current=$iv_ruleIsUniqueOperation.current; } 
	 EOF 
;

// Rule IsUniqueOperation
ruleIsUniqueOperation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'->' 
    {
        createLeafNode(grammarAccess.getIsUniqueOperationAccess().getHyphenMinusGreaterThanSignKeyword_0(), null); 
    }
	'isUnique' 
    {
        createLeafNode(grammarAccess.getIsUniqueOperationAccess().getIsUniqueKeyword_1(), null); 
    }
(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getIsUniqueOperationAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIsUniqueOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getIsUniqueOperationAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIsUniqueOperationAccess().getExprExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIsUniqueOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getIsUniqueOperationAccess().getRightParenthesisKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIsUniqueOperationAccess().getSuffixSuffixExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_suffix_6_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIsUniqueOperationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_6_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleValueSpecification
entryRuleValueSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getValueSpecificationRule(), currentNode); }
	 iv_ruleValueSpecification=ruleValueSpecification 
	 { $current=$iv_ruleValueSpecification.current; } 
	 EOF 
;

// Rule ValueSpecification
ruleValueSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getNameExpressionParserRuleCall_0(), currentNode); 
    }
    this_NameExpression_0=ruleNameExpression
    { 
        $current = $this_NameExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getLITERALParserRuleCall_1(), currentNode); 
    }
    this_LITERAL_1=ruleLITERAL
    { 
        $current = $this_LITERAL_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getThisExpressionParserRuleCall_2(), currentNode); 
    }
    this_ThisExpression_2=ruleThisExpression
    { 
        $current = $this_ThisExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getSuperInvocationExpressionParserRuleCall_3(), currentNode); 
    }
    this_SuperInvocationExpression_3=ruleSuperInvocationExpression
    { 
        $current = $this_SuperInvocationExpression_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getInstanceCreationExpressionParserRuleCall_4(), currentNode); 
    }
    this_InstanceCreationExpression_4=ruleInstanceCreationExpression
    { 
        $current = $this_InstanceCreationExpression_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getParenthesizedExpressionParserRuleCall_5(), currentNode); 
    }
    this_ParenthesizedExpression_5=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getValueSpecificationAccess().getNullExpressionParserRuleCall_6(), currentNode); 
    }
    this_NullExpression_6=ruleNullExpression
    { 
        $current = $this_NullExpression_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNonLiteralValueSpecification
entryRuleNonLiteralValueSpecification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonLiteralValueSpecificationRule(), currentNode); }
	 iv_ruleNonLiteralValueSpecification=ruleNonLiteralValueSpecification 
	 { $current=$iv_ruleNonLiteralValueSpecification.current; } 
	 EOF 
;

// Rule NonLiteralValueSpecification
ruleNonLiteralValueSpecification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getNameExpressionParserRuleCall_0(), currentNode); 
    }
    this_NameExpression_0=ruleNameExpression
    { 
        $current = $this_NameExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getParenthesizedExpressionParserRuleCall_1(), currentNode); 
    }
    this_ParenthesizedExpression_1=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getInstanceCreationExpressionParserRuleCall_2(), currentNode); 
    }
    this_InstanceCreationExpression_2=ruleInstanceCreationExpression
    { 
        $current = $this_InstanceCreationExpression_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getThisExpressionParserRuleCall_3(), currentNode); 
    }
    this_ThisExpression_3=ruleThisExpression
    { 
        $current = $this_ThisExpression_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNonLiteralValueSpecificationAccess().getSuperInvocationExpressionParserRuleCall_4(), currentNode); 
    }
    this_SuperInvocationExpression_4=ruleSuperInvocationExpression
    { 
        $current = $this_SuperInvocationExpression_4.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParenthesizedExpressionRule(), currentNode); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpOrTypeCastExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expOrTypeCast_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParenthesizedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expOrTypeCast",
	        		lv_expOrTypeCast_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getCastedNonLiteralValueSpecificationParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_casted_3_0=ruleNonLiteralValueSpecification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParenthesizedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"casted",
	        		lv_casted_3_0, 
	        		"NonLiteralValueSpecification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_suffix_4_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParenthesizedExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_4_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullExpressionRule(), currentNode); }
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current; } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullExpressionAccess().getNullExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullExpressionAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleThisExpression
entryRuleThisExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThisExpressionRule(), currentNode); }
	 iv_ruleThisExpression=ruleThisExpression 
	 { $current=$iv_ruleThisExpression.current; } 
	 EOF 
;

// Rule ThisExpression
ruleThisExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getThisExpressionAccess().getThisExpressionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getThisExpressionAccess().getThisExpressionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'this' 
    {
        createLeafNode(grammarAccess.getThisExpressionAccess().getThisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getThisExpressionAccess().getSuffixSuffixExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_suffix_2_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_2_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSuperInvocationExpression
entryRuleSuperInvocationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSuperInvocationExpressionRule(), currentNode); }
	 iv_ruleSuperInvocationExpression=ruleSuperInvocationExpression 
	 { $current=$iv_ruleSuperInvocationExpression.current; } 
	 EOF 
;

// Rule SuperInvocationExpression
ruleSuperInvocationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'super' 
    {
        createLeafNode(grammarAccess.getSuperInvocationExpressionAccess().getSuperKeyword_0(), null); 
    }
((	'.' 
    {
        createLeafNode(grammarAccess.getSuperInvocationExpressionAccess().getFullStopKeyword_1_0_0(), null); 
    }
(
(
		lv_className_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getSuperInvocationExpressionAccess().getClassNameIDTerminalRuleCall_1_0_1_0(), "className"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuperInvocationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"className",
	        		lv_className_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getSuperInvocationExpressionAccess().getColonColonKeyword_1_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getOperationCallWithoutDotOperationCallExpressionWithoutDotParserRuleCall_1_0_3_0(), currentNode); 
	    }
		lv_operationCallWithoutDot_4_0=ruleOperationCallExpressionWithoutDot		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuperInvocationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operationCallWithoutDot",
	        		lv_operationCallWithoutDot_4_0, 
	        		"OperationCallExpressionWithoutDot", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSuperInvocationExpressionAccess().getOperationCallOperationCallExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_operationCall_5_0=ruleOperationCallExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuperInvocationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operationCall",
	        		lv_operationCall_5_0, 
	        		"OperationCallExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleInstanceCreationExpression
entryRuleInstanceCreationExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstanceCreationExpressionRule(), currentNode); }
	 iv_ruleInstanceCreationExpression=ruleInstanceCreationExpression 
	 { $current=$iv_ruleInstanceCreationExpression.current; } 
	 EOF 
;

// Rule InstanceCreationExpression
ruleInstanceCreationExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'new' 
    {
        createLeafNode(grammarAccess.getInstanceCreationExpressionAccess().getNewKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getConstructorQualifiedNameWithBindingParserRuleCall_1_0(), currentNode); 
	    }
		lv_constructor_1_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceCreationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constructor",
	        		lv_constructor_1_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getTupleTupleParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_tuple_2_0=ruleTuple		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceCreationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tuple",
	        		lv_tuple_2_0, 
	        		"Tuple", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getSequenceConstuctionCompletionSequenceConstructionCompletionParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_sequenceConstuctionCompletion_3_0=ruleSequenceConstructionCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceCreationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequenceConstuctionCompletion",
	        		lv_sequenceConstuctionCompletion_3_0, 
	        		"SequenceConstructionCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceCreationExpressionAccess().getSuffixSuffixExpressionParserRuleCall_3_0(), currentNode); 
	    }
		lv_suffix_4_0=ruleSuffixExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceCreationExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"suffix",
	        		lv_suffix_4_0, 
	        		"SuffixExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSequenceConstructionOrAccessCompletion
entryRuleSequenceConstructionOrAccessCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionRule(), currentNode); }
	 iv_ruleSequenceConstructionOrAccessCompletion=ruleSequenceConstructionOrAccessCompletion 
	 { $current=$iv_ruleSequenceConstructionOrAccessCompletion.current; } 
	 EOF 
;

// Rule SequenceConstructionOrAccessCompletion
ruleSequenceConstructionOrAccessCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_multiplicityIndicator_0_0=	'[' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_0_0_0(), "multiplicityIndicator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionOrAccessCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicityIndicator", true, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getAccessCompletionAccessCompletionParserRuleCall_0_1_0_0(), currentNode); 
	    }
		lv_accessCompletion_1_0=ruleAccessCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionOrAccessCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessCompletion",
	        		lv_accessCompletion_1_0, 
	        		"AccessCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getSequenceCompletionPartialSequenceConstructionCompletionParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_sequenceCompletion_2_0=rulePartialSequenceConstructionCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionOrAccessCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequenceCompletion",
	        		lv_sequenceCompletion_2_0, 
	        		"PartialSequenceConstructionCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionOrAccessCompletionAccess().getExpressionSequenceConstructionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_3_0=ruleSequenceConstructionExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionOrAccessCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_3_0, 
	        		"SequenceConstructionExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAccessCompletion
entryRuleAccessCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAccessCompletionRule(), currentNode); }
	 iv_ruleAccessCompletion=ruleAccessCompletion 
	 { $current=$iv_ruleAccessCompletion.current; } 
	 EOF 
;

// Rule AccessCompletion
ruleAccessCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAccessCompletionAccess().getAccessIndexExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_accessIndex_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAccessCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"accessIndex",
	        		lv_accessIndex_0_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getAccessCompletionAccess().getRightSquareBracketKeyword_1(), null); 
    }
)
;





// Entry rule entryRulePartialSequenceConstructionCompletion
entryRulePartialSequenceConstructionCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPartialSequenceConstructionCompletionRule(), currentNode); }
	 iv_rulePartialSequenceConstructionCompletion=rulePartialSequenceConstructionCompletion 
	 { $current=$iv_rulePartialSequenceConstructionCompletion.current; } 
	 EOF 
;

// Rule PartialSequenceConstructionCompletion
rulePartialSequenceConstructionCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	']' 
    {
        createLeafNode(grammarAccess.getPartialSequenceConstructionCompletionAccess().getRightSquareBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPartialSequenceConstructionCompletionAccess().getExpressionSequenceConstructionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleSequenceConstructionExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPartialSequenceConstructionCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"SequenceConstructionExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSequenceConstructionCompletion
entryRuleSequenceConstructionCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceConstructionCompletionRule(), currentNode); }
	 iv_ruleSequenceConstructionCompletion=ruleSequenceConstructionCompletion 
	 { $current=$iv_ruleSequenceConstructionCompletion.current; } 
	 EOF 
;

// Rule SequenceConstructionCompletion
ruleSequenceConstructionCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_multiplicityIndicator_0_0=	'[' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionCompletionAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_0_0_0(), "multiplicityIndicator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicityIndicator", true, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionCompletionAccess().getRightSquareBracketKeyword_0_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionCompletionAccess().getExpressionSequenceConstructionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_2_0=ruleSequenceConstructionExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"SequenceConstructionExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSequenceConstructionExpression
entryRuleSequenceConstructionExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceConstructionExpressionRule(), currentNode); }
	 iv_ruleSequenceConstructionExpression=ruleSequenceConstructionExpression 
	 { $current=$iv_ruleSequenceConstructionExpression.current; } 
	 EOF 
;

// Rule SequenceConstructionExpression
ruleSequenceConstructionExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionExpressionAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getSequenceElementSequenceElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_sequenceElement_1_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sequenceElement",
	        		lv_sequenceElement_1_0, 
	        		"SequenceElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	',' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionExpressionAccess().getCommaKeyword_2_0_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getSequenceElementSequenceElementParserRuleCall_2_0_1_0(), currentNode); 
	    }
		lv_sequenceElement_3_0=ruleSequenceElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"sequenceElement",
	        		lv_sequenceElement_3_0, 
	        		"SequenceElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*
    |(	'..' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionExpressionAccess().getFullStopFullStopKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequenceConstructionExpressionAccess().getRangeUpperExpressionParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_rangeUpper_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequenceConstructionExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rangeUpper",
	        		lv_rangeUpper_5_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))	'}' 
    {
        createLeafNode(grammarAccess.getSequenceConstructionExpressionAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleSequenceElement
entryRuleSequenceElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequenceElementRule(), currentNode); }
	 iv_ruleSequenceElement=ruleSequenceElement 
	 { $current=$iv_ruleSequenceElement.current; } 
	 EOF 
;

// Rule SequenceElement
ruleSequenceElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceElementAccess().getExpressionParserRuleCall_0(), currentNode); 
    }
    this_Expression_0=ruleExpression
    { 
        $current = $this_Expression_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getSequenceElementAccess().getSequenceConstructionExpressionParserRuleCall_1(), currentNode); 
    }
    this_SequenceConstructionExpression_1=ruleSequenceConstructionExpression
    { 
        $current = $this_SequenceConstructionExpression_1.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'{' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getBlockAccess().getBlockAction_1().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockAccess().getBlockAction_1(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getSequenceStatementSequenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_sequence_2_0=ruleStatementSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequence",
	        		lv_sequence_2_0, 
	        		"StatementSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'}' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleStatementSequence
entryRuleStatementSequence returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementSequenceRule(), currentNode); }
	 iv_ruleStatementSequence=ruleStatementSequence 
	 { $current=$iv_ruleStatementSequence.current; } 
	 EOF 
;

// Rule StatementSequence
ruleStatementSequence returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementSequenceAccess().getStatementsDocumentedStatementParserRuleCall_0(), currentNode); 
	    }
		lv_statements_0_0=ruleDocumentedStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_0_0, 
	        		"DocumentedStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
;





// Entry rule entryRuleInlineStatement
entryRuleInlineStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInlineStatementRule(), currentNode); }
	 iv_ruleInlineStatement=ruleInlineStatement 
	 { $current=$iv_ruleInlineStatement.current; } 
	 EOF 
;

// Rule InlineStatement
ruleInlineStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'/*@' 
    {
        createLeafNode(grammarAccess.getInlineStatementAccess().getSolidusAsteriskCommercialAtKeyword_0(), null); 
    }
	'inline' 
    {
        createLeafNode(grammarAccess.getInlineStatementAccess().getInlineKeyword_1(), null); 
    }
(
(
		lv_langageName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInlineStatementAccess().getLangageNameIDTerminalRuleCall_2_0(), "langageName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"langageName",
	        		lv_langageName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_body_3_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getInlineStatementAccess().getBodySTRINGTerminalRuleCall_3_0(), "body"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInlineStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"body",
	        		lv_body_3_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'*/' 
    {
        createLeafNode(grammarAccess.getInlineStatementAccess().getAsteriskSolidusKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleAnnotatedStatement
entryRuleAnnotatedStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotatedStatementRule(), currentNode); }
	 iv_ruleAnnotatedStatement=ruleAnnotatedStatement 
	 { $current=$iv_ruleAnnotatedStatement.current; } 
	 EOF 
;

// Rule AnnotatedStatement
ruleAnnotatedStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'//@' 
    {
        createLeafNode(grammarAccess.getAnnotatedStatementAccess().getSolidusSolidusCommercialAtKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotatedStatementAccess().getAnnotationAnnotationParserRuleCall_1_0(), currentNode); 
	    }
		lv_annotation_1_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotatedStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"annotation",
	        		lv_annotation_1_0, 
	        		"Annotation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotatedStatementAccess().getBlockBlockParserRuleCall_2_0(), currentNode); 
	    }
		lv_block_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotatedStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_2_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDocumentedStatement
entryRuleDocumentedStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDocumentedStatementRule(), currentNode); }
	 iv_ruleDocumentedStatement=ruleDocumentedStatement 
	 { $current=$iv_ruleDocumentedStatement.current; } 
	 EOF 
;

// Rule DocumentedStatement
ruleDocumentedStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_comment_0_1=RULE_ML_COMMENT
		{
			createLeafNode(grammarAccess.getDocumentedStatementAccess().getCommentML_COMMENTTerminalRuleCall_0_0_0(), "comment"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentedStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"comment",
	        		lv_comment_0_1, 
	        		"ML_COMMENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_comment_0_2=RULE_SL_COMMENT
		{
			createLeafNode(grammarAccess.getDocumentedStatementAccess().getCommentSL_COMMENTTerminalRuleCall_0_0_1(), "comment"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentedStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"comment",
	        		lv_comment_0_2, 
	        		"SL_COMMENT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDocumentedStatementAccess().getStatementStatementParserRuleCall_1_0(), currentNode); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDocumentedStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getAnnotatedStatementParserRuleCall_0(), currentNode); 
    }
    this_AnnotatedStatement_0=ruleAnnotatedStatement
    { 
        $current = $this_AnnotatedStatement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getInlineStatementParserRuleCall_1(), currentNode); 
    }
    this_InlineStatement_1=ruleInlineStatement
    { 
        $current = $this_InlineStatement_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBlockStatementParserRuleCall_2(), currentNode); 
    }
    this_BlockStatement_2=ruleBlockStatement
    { 
        $current = $this_BlockStatement_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEmptyStatementParserRuleCall_3(), currentNode); 
    }
    this_EmptyStatement_3=ruleEmptyStatement
    { 
        $current = $this_EmptyStatement_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getLocalNameDeclarationStatementParserRuleCall_4(), currentNode); 
    }
    this_LocalNameDeclarationStatement_4=ruleLocalNameDeclarationStatement
    { 
        $current = $this_LocalNameDeclarationStatement_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_5(), currentNode); 
    }
    this_IfStatement_5=ruleIfStatement
    { 
        $current = $this_IfStatement_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_6(), currentNode); 
    }
    this_SwitchStatement_6=ruleSwitchStatement
    { 
        $current = $this_SwitchStatement_6.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_7(), currentNode); 
    }
    this_WhileStatement_7=ruleWhileStatement
    { 
        $current = $this_WhileStatement_7.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getDoStatementParserRuleCall_8(), currentNode); 
    }
    this_DoStatement_8=ruleDoStatement
    { 
        $current = $this_DoStatement_8.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_9(), currentNode); 
    }
    this_ForStatement_9=ruleForStatement
    { 
        $current = $this_ForStatement_9.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_10(), currentNode); 
    }
    this_BreakStatement_10=ruleBreakStatement
    { 
        $current = $this_BreakStatement_10.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_11(), currentNode); 
    }
    this_ReturnStatement_11=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_11.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getAcceptStatementParserRuleCall_12(), currentNode); 
    }
    this_AcceptStatement_12=ruleAcceptStatement
    { 
        $current = $this_AcceptStatement_12.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getClassifyStatementParserRuleCall_13(), currentNode); 
    }
    this_ClassifyStatement_13=ruleClassifyStatement
    { 
        $current = $this_ClassifyStatement_13.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getInvocationOrAssignementOrDeclarationStatementParserRuleCall_14(), currentNode); 
    }
    this_InvocationOrAssignementOrDeclarationStatement_14=ruleInvocationOrAssignementOrDeclarationStatement
    { 
        $current = $this_InvocationOrAssignementOrDeclarationStatement_14.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getSuperInvocationStatementParserRuleCall_15(), currentNode); 
    }
    this_SuperInvocationStatement_15=ruleSuperInvocationStatement
    { 
        $current = $this_SuperInvocationStatement_15.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getThisInvocationStatementParserRuleCall_16(), currentNode); 
    }
    this_ThisInvocationStatement_16=ruleThisInvocationStatement
    { 
        $current = $this_ThisInvocationStatement_16.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getInstanceCreationInvocationStatementParserRuleCall_17(), currentNode); 
    }
    this_InstanceCreationInvocationStatement_17=ruleInstanceCreationInvocationStatement
    { 
        $current = $this_InstanceCreationInvocationStatement_17.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAnnotationRule(), currentNode); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAnnotationAccess().getKindAnnotationKindEnumRuleCall_0_0(), currentNode); 
	    }
		lv_kind_0_0=ruleAnnotationKind		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"kind",
	        		lv_kind_0_0, 
	        		"AnnotationKind", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		lv_args_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAnnotationAccess().getArgsIDTerminalRuleCall_1_1_0(), "args"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getCommaKeyword_1_2_0(), null); 
    }
(
(
		lv_args_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAnnotationAccess().getArgsIDTerminalRuleCall_1_2_1_0(), "args"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAnnotationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"args",
	        		lv_args_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))*	')' 
    {
        createLeafNode(grammarAccess.getAnnotationAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockStatementRule(), currentNode); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockStatementAccess().getBlockBlockParserRuleCall_0(), currentNode); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_0_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleEmptyStatement
entryRuleEmptyStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEmptyStatementRule(), currentNode); }
	 iv_ruleEmptyStatement=ruleEmptyStatement 
	 { $current=$iv_ruleEmptyStatement.current; } 
	 EOF 
;

// Rule EmptyStatement
ruleEmptyStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	';' 
    {
        createLeafNode(grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleLocalNameDeclarationStatement
entryRuleLocalNameDeclarationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLocalNameDeclarationStatementRule(), currentNode); }
	 iv_ruleLocalNameDeclarationStatement=ruleLocalNameDeclarationStatement 
	 { $current=$iv_ruleLocalNameDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalNameDeclarationStatement
ruleLocalNameDeclarationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getLetKeyword_0(), null); 
    }
(
(
		lv_varName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getVarNameIDTerminalRuleCall_1_0(), "varName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalNameDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"varName",
	        		lv_varName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getTypeQualifiedNameWithBindingParserRuleCall_3_0(), currentNode); 
	    }
		lv_type_3_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalNameDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_3_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		lv_multiplicityIndicator_4_0=	'[' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_4_0_0(), "multiplicityIndicator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalNameDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicityIndicator", true, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getRightSquareBracketKeyword_4_1(), null); 
    }
)?	'=' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getEqualsSignKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLocalNameDeclarationStatementAccess().getInitExpressionParserRuleCall_6_0(), currentNode); 
	    }
		lv_init_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLocalNameDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_7_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLocalNameDeclarationStatementAccess().getSemicolonKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfStatementRule(), currentNode); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfStatementAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getSequentialClaussesSequentialClausesParserRuleCall_1_0(), currentNode); 
	    }
		lv_sequentialClausses_1_0=ruleSequentialClauses		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequentialClausses",
	        		lv_sequentialClausses_1_0, 
	        		"SequentialClauses", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfStatementAccess().getFinalClauseFinalClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_finalClause_2_0=ruleFinalClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"finalClause",
	        		lv_finalClause_2_0, 
	        		"FinalClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleSequentialClauses
entryRuleSequentialClauses returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSequentialClausesRule(), currentNode); }
	 iv_ruleSequentialClauses=ruleSequentialClauses 
	 { $current=$iv_ruleSequentialClauses.current; } 
	 EOF 
;

// Rule SequentialClauses
ruleSequentialClauses returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequentialClausesAccess().getConccurentClausesConcurrentClausesParserRuleCall_0_0(), currentNode); 
	    }
		lv_conccurentClauses_0_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequentialClausesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"conccurentClauses",
	        		lv_conccurentClauses_0_0, 
	        		"ConcurrentClauses", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'else' 
    {
        createLeafNode(grammarAccess.getSequentialClausesAccess().getElseKeyword_1_0(), null); 
    }
	'if' 
    {
        createLeafNode(grammarAccess.getSequentialClausesAccess().getIfKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSequentialClausesAccess().getConccurentClausesConcurrentClausesParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_conccurentClauses_3_0=ruleConcurrentClauses		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSequentialClausesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"conccurentClauses",
	        		lv_conccurentClauses_3_0, 
	        		"ConcurrentClauses", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleConcurrentClauses
entryRuleConcurrentClauses returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConcurrentClausesRule(), currentNode); }
	 iv_ruleConcurrentClauses=ruleConcurrentClauses 
	 { $current=$iv_ruleConcurrentClauses.current; } 
	 EOF 
;

// Rule ConcurrentClauses
ruleConcurrentClauses returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcurrentClausesAccess().getNonFinalClauseNonFinalClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_nonFinalClause_0_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcurrentClausesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nonFinalClause",
	        		lv_nonFinalClause_0_0, 
	        		"NonFinalClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'or' 
    {
        createLeafNode(grammarAccess.getConcurrentClausesAccess().getOrKeyword_1_0(), null); 
    }
	'if' 
    {
        createLeafNode(grammarAccess.getConcurrentClausesAccess().getIfKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConcurrentClausesAccess().getNonFinalClauseNonFinalClauseParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_nonFinalClause_3_0=ruleNonFinalClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConcurrentClausesRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"nonFinalClause",
	        		lv_nonFinalClause_3_0, 
	        		"NonFinalClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNonFinalClause
entryRuleNonFinalClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonFinalClauseRule(), currentNode); }
	 iv_ruleNonFinalClause=ruleNonFinalClause 
	 { $current=$iv_ruleNonFinalClause.current; } 
	 EOF 
;

// Rule NonFinalClause
ruleNonFinalClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getNonFinalClauseAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNonFinalClauseAccess().getConditionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNonFinalClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNonFinalClauseAccess().getRightParenthesisKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNonFinalClauseAccess().getBlockBlockParserRuleCall_3_0(), currentNode); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNonFinalClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_3_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleFinalClause
entryRuleFinalClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFinalClauseRule(), currentNode); }
	 iv_ruleFinalClause=ruleFinalClause 
	 { $current=$iv_ruleFinalClause.current; } 
	 EOF 
;

// Rule FinalClause
ruleFinalClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'else' 
    {
        createLeafNode(grammarAccess.getFinalClauseAccess().getElseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFinalClauseAccess().getBlockBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFinalClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchStatementRule(), currentNode); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'switch' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitchClauseSwitchClauseParserRuleCall_5_0(), currentNode); 
	    }
		lv_switchClause_5_0=ruleSwitchClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"switchClause",
	        		lv_switchClause_5_0, 
	        		"SwitchClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchStatementAccess().getDefaultClauseSwitchDefaultClauseParserRuleCall_6_0(), currentNode); 
	    }
		lv_defaultClause_6_0=ruleSwitchDefaultClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"defaultClause",
	        		lv_defaultClause_6_0, 
	        		"SwitchDefaultClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'}' 
    {
        createLeafNode(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleSwitchClause
entryRuleSwitchClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchClauseRule(), currentNode); }
	 iv_ruleSwitchClause=ruleSwitchClause 
	 { $current=$iv_ruleSwitchClause.current; } 
	 EOF 
;

// Rule SwitchClause
ruleSwitchClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchClauseAccess().getSwitchCaseSwitchCaseParserRuleCall_0_0(), currentNode); 
	    }
		lv_switchCase_0_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"switchCase",
	        		lv_switchCase_0_0, 
	        		"SwitchCase", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchClauseAccess().getSwitchCaseSwitchCaseParserRuleCall_1_0(), currentNode); 
	    }
		lv_switchCase_1_0=ruleSwitchCase		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"switchCase",
	        		lv_switchCase_1_0, 
	        		"SwitchCase", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchClauseAccess().getStatementSequenceNonEmptyStatementSequenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_statementSequence_2_0=ruleNonEmptyStatementSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statementSequence",
	        		lv_statementSequence_2_0, 
	        		"NonEmptyStatementSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchCaseRule(), currentNode); }
	 iv_ruleSwitchCase=ruleSwitchCase 
	 { $current=$iv_ruleSwitchCase.current; } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'case' 
    {
        createLeafNode(grammarAccess.getSwitchCaseAccess().getCaseKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchCaseAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchCaseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getSwitchCaseAccess().getColonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleSwitchDefaultClause
entryRuleSwitchDefaultClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSwitchDefaultClauseRule(), currentNode); }
	 iv_ruleSwitchDefaultClause=ruleSwitchDefaultClause 
	 { $current=$iv_ruleSwitchDefaultClause.current; } 
	 EOF 
;

// Rule SwitchDefaultClause
ruleSwitchDefaultClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'default' 
    {
        createLeafNode(grammarAccess.getSwitchDefaultClauseAccess().getDefaultKeyword_0(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getSwitchDefaultClauseAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSwitchDefaultClauseAccess().getStatementSequenceNonEmptyStatementSequenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_statementSequence_2_0=ruleNonEmptyStatementSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSwitchDefaultClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statementSequence",
	        		lv_statementSequence_2_0, 
	        		"NonEmptyStatementSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNonEmptyStatementSequence
entryRuleNonEmptyStatementSequence returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNonEmptyStatementSequenceRule(), currentNode); }
	 iv_ruleNonEmptyStatementSequence=ruleNonEmptyStatementSequence 
	 { $current=$iv_ruleNonEmptyStatementSequence.current; } 
	 EOF 
;

// Rule NonEmptyStatementSequence
ruleNonEmptyStatementSequence returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNonEmptyStatementSequenceAccess().getStatementDocumentedStatementParserRuleCall_0(), currentNode); 
	    }
		lv_statement_0_0=ruleDocumentedStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNonEmptyStatementSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statement",
	        		lv_statement_0_0, 
	        		"DocumentedStatement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
;





// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getWhileStatementRule(), currentNode); }
	 iv_ruleWhileStatement=ruleWhileStatement 
	 { $current=$iv_ruleWhileStatement.current; } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'while' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getWhileKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_condition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getWhileStatementAccess().getBlockBlockParserRuleCall_4_0(), currentNode); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getWhileStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_4_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDoStatementRule(), currentNode); }
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current; } 
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'do' 
    {
        createLeafNode(grammarAccess.getDoStatementAccess().getDoKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoStatementAccess().getBlockBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'while' 
    {
        createLeafNode(grammarAccess.getDoStatementAccess().getWhileKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDoStatementAccess().getConditionExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDoStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getDoStatementAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForStatementRule(), currentNode); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'for' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getForKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getControlForControlParserRuleCall_2_0(), currentNode); 
	    }
		lv_control_2_0=ruleForControl		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"control",
	        		lv_control_2_0, 
	        		"ForControl", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForStatementAccess().getBlockBlockParserRuleCall_4_0(), currentNode); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_4_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleForControl
entryRuleForControl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getForControlRule(), currentNode); }
	 iv_ruleForControl=ruleForControl 
	 { $current=$iv_ruleForControl.current; } 
	 EOF 
;

// Rule ForControl
ruleForControl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getForControlAccess().getLoopVariableDefinitionLoopVariableDefinitionParserRuleCall_0(), currentNode); 
	    }
		lv_loopVariableDefinition_0_0=ruleLoopVariableDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getForControlRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"loopVariableDefinition",
	        		lv_loopVariableDefinition_0_0, 
	        		"LoopVariableDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleLoopVariableDefinition
entryRuleLoopVariableDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLoopVariableDefinitionRule(), currentNode); }
	 iv_ruleLoopVariableDefinition=ruleLoopVariableDefinition 
	 { $current=$iv_ruleLoopVariableDefinition.current; } 
	 EOF 
;

// Rule LoopVariableDefinition
ruleLoopVariableDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLoopVariableDefinitionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'in' 
    {
        createLeafNode(grammarAccess.getLoopVariableDefinitionAccess().getInKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpression1ExpressionParserRuleCall_2_0(), currentNode); 
	    }
		lv_expression1_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression1",
	        		lv_expression1_2_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'..' 
    {
        createLeafNode(grammarAccess.getLoopVariableDefinitionAccess().getFullStopFullStopKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLoopVariableDefinitionAccess().getExpression2ExpressionParserRuleCall_4_0(), currentNode); 
	    }
		lv_expression2_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLoopVariableDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression2",
	        		lv_expression2_4_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBreakStatementRule(), currentNode); }
	 iv_ruleBreakStatement=ruleBreakStatement 
	 { $current=$iv_ruleBreakStatement.current; } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'break' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getBreakKeyword_1(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReturnStatementRule(), currentNode); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'return' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getReturnKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getReturnStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleAcceptStatement
entryRuleAcceptStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAcceptStatementRule(), currentNode); }
	 iv_ruleAcceptStatement=ruleAcceptStatement 
	 { $current=$iv_ruleAcceptStatement.current; } 
	 EOF 
;

// Rule AcceptStatement
ruleAcceptStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptStatementAccess().getClauseAcceptClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_clause_0_0=ruleAcceptClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_0_0, 
	        		"AcceptClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptStatementAccess().getSimpleAcceptSimpleAcceptStatementCompletionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_simpleAccept_1_0=ruleSimpleAcceptStatementCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"simpleAccept",
	        		lv_simpleAccept_1_0, 
	        		"SimpleAcceptStatementCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptStatementAccess().getCompoundAcceptCompoundAcceptStatementCompletionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_compoundAccept_2_0=ruleCompoundAcceptStatementCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"compoundAccept",
	        		lv_compoundAccept_2_0, 
	        		"CompoundAcceptStatementCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleSimpleAcceptStatementCompletion
entryRuleSimpleAcceptStatementCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleAcceptStatementCompletionRule(), currentNode); }
	 iv_ruleSimpleAcceptStatementCompletion=ruleSimpleAcceptStatementCompletion 
	 { $current=$iv_ruleSimpleAcceptStatementCompletion.current; } 
	 EOF 
;

// Rule SimpleAcceptStatementCompletion
ruleSimpleAcceptStatementCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getSimpleAcceptStatementCompletionAccess().getSimpleAcceptStatementCompletionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSimpleAcceptStatementCompletionAccess().getSimpleAcceptStatementCompletionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	';' 
    {
        createLeafNode(grammarAccess.getSimpleAcceptStatementCompletionAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleCompoundAcceptStatementCompletion
entryRuleCompoundAcceptStatementCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionRule(), currentNode); }
	 iv_ruleCompoundAcceptStatementCompletion=ruleCompoundAcceptStatementCompletion 
	 { $current=$iv_ruleCompoundAcceptStatementCompletion.current; } 
	 EOF 
;

// Rule CompoundAcceptStatementCompletion
ruleCompoundAcceptStatementCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionAccess().getBlockBlockParserRuleCall_0_0(), currentNode); 
	    }
		lv_block_0_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundAcceptStatementCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_0_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'or' 
    {
        createLeafNode(grammarAccess.getCompoundAcceptStatementCompletionAccess().getOrKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompoundAcceptStatementCompletionAccess().getAcceptBlockAcceptBlockParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_acceptBlock_2_0=ruleAcceptBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompoundAcceptStatementCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"acceptBlock",
	        		lv_acceptBlock_2_0, 
	        		"AcceptBlock", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleAcceptBlock
entryRuleAcceptBlock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAcceptBlockRule(), currentNode); }
	 iv_ruleAcceptBlock=ruleAcceptBlock 
	 { $current=$iv_ruleAcceptBlock.current; } 
	 EOF 
;

// Rule AcceptBlock
ruleAcceptBlock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptBlockAccess().getClauseAcceptClauseParserRuleCall_0_0(), currentNode); 
	    }
		lv_clause_0_0=ruleAcceptClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_0_0, 
	        		"AcceptClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptBlockAccess().getBlockBlockParserRuleCall_1_0(), currentNode); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"block",
	        		lv_block_1_0, 
	        		"Block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleAcceptClause
entryRuleAcceptClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAcceptClauseRule(), currentNode); }
	 iv_ruleAcceptClause=ruleAcceptClause 
	 { $current=$iv_ruleAcceptClause.current; } 
	 EOF 
;

// Rule AcceptClause
ruleAcceptClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'accept' 
    {
        createLeafNode(grammarAccess.getAcceptClauseAccess().getAcceptKeyword_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getAcceptClauseAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getAcceptClauseAccess().getNameIDTerminalRuleCall_2_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getAcceptClauseAccess().getColonKeyword_2_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAcceptClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_3_0(), currentNode); 
	    }
		lv_qualifiedNameList_4_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAcceptClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedNameList",
	        		lv_qualifiedNameList_4_0, 
	        		"QualifiedNameList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getAcceptClauseAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleClassifyStatement
entryRuleClassifyStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifyStatementRule(), currentNode); }
	 iv_ruleClassifyStatement=ruleClassifyStatement 
	 { $current=$iv_ruleClassifyStatement.current; } 
	 EOF 
;

// Rule ClassifyStatement
ruleClassifyStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'classify' 
    {
        createLeafNode(grammarAccess.getClassifyStatementAccess().getClassifyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifyStatementAccess().getExpressionExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expression",
	        		lv_expression_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifyStatementAccess().getClauseClassificationClauseParserRuleCall_2_0(), currentNode); 
	    }
		lv_clause_2_0=ruleClassificationClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifyStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"clause",
	        		lv_clause_2_0, 
	        		"ClassificationClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getClassifyStatementAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleClassificationClause
entryRuleClassificationClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassificationClauseRule(), currentNode); }
	 iv_ruleClassificationClause=ruleClassificationClause 
	 { $current=$iv_ruleClassificationClause.current; } 
	 EOF 
;

// Rule ClassificationClause
ruleClassificationClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyFromClauseClassificationFromClauseParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_classifyFromClause_0_0=ruleClassificationFromClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifyFromClause",
	        		lv_classifyFromClause_0_0, 
	        		"ClassificationFromClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyToClauseClassificationToClauseParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_classifyToClause_1_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifyToClause",
	        		lv_classifyToClause_1_0, 
	        		"ClassificationToClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationClauseAccess().getReclassyAllClauseReclassifyAllClauseParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_reclassyAllClause_2_0=ruleReclassifyAllClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"reclassyAllClause",
	        		lv_reclassyAllClause_2_0, 
	        		"ReclassifyAllClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationClauseAccess().getClassifyToClauseClassificationToClauseParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_classifyToClause_3_0=ruleClassificationToClause		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifyToClause",
	        		lv_classifyToClause_3_0, 
	        		"ClassificationToClause", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleClassificationFromClause
entryRuleClassificationFromClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassificationFromClauseRule(), currentNode); }
	 iv_ruleClassificationFromClause=ruleClassificationFromClause 
	 { $current=$iv_ruleClassificationFromClause.current; } 
	 EOF 
;

// Rule ClassificationFromClause
ruleClassificationFromClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'from' 
    {
        createLeafNode(grammarAccess.getClassificationFromClauseAccess().getFromKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationFromClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualifiedNameList_1_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationFromClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedNameList",
	        		lv_qualifiedNameList_1_0, 
	        		"QualifiedNameList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClassificationToClause
entryRuleClassificationToClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassificationToClauseRule(), currentNode); }
	 iv_ruleClassificationToClause=ruleClassificationToClause 
	 { $current=$iv_ruleClassificationToClause.current; } 
	 EOF 
;

// Rule ClassificationToClause
ruleClassificationToClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'to' 
    {
        createLeafNode(grammarAccess.getClassificationToClauseAccess().getToKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassificationToClauseAccess().getQualifiedNameListQualifiedNameListParserRuleCall_1_0(), currentNode); 
	    }
		lv_qualifiedNameList_1_0=ruleQualifiedNameList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassificationToClauseRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"qualifiedNameList",
	        		lv_qualifiedNameList_1_0, 
	        		"QualifiedNameList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleReclassifyAllClause
entryRuleReclassifyAllClause returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getReclassifyAllClauseRule(), currentNode); }
	 iv_ruleReclassifyAllClause=ruleReclassifyAllClause 
	 { $current=$iv_ruleReclassifyAllClause.current; } 
	 EOF 
;

// Rule ReclassifyAllClause
ruleReclassifyAllClause returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getReclassifyAllClauseAccess().getReclassifyAllClauseAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getReclassifyAllClauseAccess().getReclassifyAllClauseAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'from' 
    {
        createLeafNode(grammarAccess.getReclassifyAllClauseAccess().getFromKeyword_1(), null); 
    }
	'*' 
    {
        createLeafNode(grammarAccess.getReclassifyAllClauseAccess().getAsteriskKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleQualifiedNameList
entryRuleQualifiedNameList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedNameListRule(), currentNode); }
	 iv_ruleQualifiedNameList=ruleQualifiedNameList 
	 { $current=$iv_ruleQualifiedNameList.current; } 
	 EOF 
;

// Rule QualifiedNameList
ruleQualifiedNameList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameListAccess().getQualifiedNameQualifiedNameWithBindingParserRuleCall_0_0(), currentNode); 
	    }
		lv_qualifiedName_0_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"qualifiedName",
	        		lv_qualifiedName_0_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getQualifiedNameListAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedNameListAccess().getQualifiedNameQualifiedNameWithBindingParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_qualifiedName_2_0=ruleQualifiedNameWithBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedNameListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"qualifiedName",
	        		lv_qualifiedName_2_0, 
	        		"QualifiedNameWithBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleInvocationOrAssignementOrDeclarationStatement
entryRuleInvocationOrAssignementOrDeclarationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule(), currentNode); }
	 iv_ruleInvocationOrAssignementOrDeclarationStatement=ruleInvocationOrAssignementOrDeclarationStatement 
	 { $current=$iv_ruleInvocationOrAssignementOrDeclarationStatement.current; } 
	 EOF 
;

// Rule InvocationOrAssignementOrDeclarationStatement
ruleInvocationOrAssignementOrDeclarationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getTypePart_OR_assignedPart_OR_invocationPartNameExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv_typePart_OR_assignedPart_OR_invocationPart_0_0=ruleNameExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"typePart_OR_assignedPart_OR_invocationPart",
	        		lv_typePart_OR_assignedPart_OR_invocationPart_0_0, 
	        		"NameExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getVariableDeclarationCompletionVariableDeclarationCompletionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_variableDeclarationCompletion_1_0=ruleVariableDeclarationCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variableDeclarationCompletion",
	        		lv_variableDeclarationCompletion_1_0, 
	        		"VariableDeclarationCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getAssignmentCompletionAssignmentCompletionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_assignmentCompletion_2_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvocationOrAssignementOrDeclarationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assignmentCompletion",
	        		lv_assignmentCompletion_2_0, 
	        		"AssignmentCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getInvocationOrAssignementOrDeclarationStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleSuperInvocationStatement
entryRuleSuperInvocationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSuperInvocationStatementRule(), currentNode); }
	 iv_ruleSuperInvocationStatement=ruleSuperInvocationStatement 
	 { $current=$iv_ruleSuperInvocationStatement.current; } 
	 EOF 
;

// Rule SuperInvocationStatement
ruleSuperInvocationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSuperInvocationStatementAccess().get_superSuperInvocationExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv__super_0_0=ruleSuperInvocationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSuperInvocationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"_super",
	        		lv__super_0_0, 
	        		"SuperInvocationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getSuperInvocationStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleThisInvocationStatement
entryRuleThisInvocationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getThisInvocationStatementRule(), currentNode); }
	 iv_ruleThisInvocationStatement=ruleThisInvocationStatement 
	 { $current=$iv_ruleThisInvocationStatement.current; } 
	 EOF 
;

// Rule ThisInvocationStatement
ruleThisInvocationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getThisInvocationStatementAccess().get_thisThisExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv__this_0_0=ruleThisExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisInvocationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"_this",
	        		lv__this_0_0, 
	        		"ThisExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getThisInvocationStatementAccess().getAssignmentCompletionAssignmentCompletionParserRuleCall_1_0(), currentNode); 
	    }
		lv_assignmentCompletion_1_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getThisInvocationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assignmentCompletion",
	        		lv_assignmentCompletion_1_0, 
	        		"AssignmentCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	';' 
    {
        createLeafNode(grammarAccess.getThisInvocationStatementAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleInstanceCreationInvocationStatement
entryRuleInstanceCreationInvocationStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstanceCreationInvocationStatementRule(), currentNode); }
	 iv_ruleInstanceCreationInvocationStatement=ruleInstanceCreationInvocationStatement 
	 { $current=$iv_ruleInstanceCreationInvocationStatement.current; } 
	 EOF 
;

// Rule InstanceCreationInvocationStatement
ruleInstanceCreationInvocationStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceCreationInvocationStatementAccess().get_newInstanceCreationExpressionParserRuleCall_0_0(), currentNode); 
	    }
		lv__new_0_0=ruleInstanceCreationExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceCreationInvocationStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"_new",
	        		lv__new_0_0, 
	        		"InstanceCreationExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getInstanceCreationInvocationStatementAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleVariableDeclarationCompletion
entryRuleVariableDeclarationCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclarationCompletionRule(), currentNode); }
	 iv_ruleVariableDeclarationCompletion=ruleVariableDeclarationCompletion 
	 { $current=$iv_ruleVariableDeclarationCompletion.current; } 
	 EOF 
;

// Rule VariableDeclarationCompletion
ruleVariableDeclarationCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		lv_multiplicityIndicator_0_0=	'[' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationCompletionAccess().getMultiplicityIndicatorLeftSquareBracketKeyword_0_0_0(), "multiplicityIndicator"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "multiplicityIndicator", true, "[", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getVariableDeclarationCompletionAccess().getRightSquareBracketKeyword_0_1(), null); 
    }
)?(
(
		lv_variableName_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableDeclarationCompletionAccess().getVariableNameIDTerminalRuleCall_1_0(), "variableName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variableName",
	        		lv_variableName_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclarationCompletionAccess().getInitValueAssignmentCompletionParserRuleCall_2_0(), currentNode); 
	    }
		lv_initValue_3_0=ruleAssignmentCompletion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclarationCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initValue",
	        		lv_initValue_3_0, 
	        		"AssignmentCompletion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)
;





// Entry rule entryRuleAssignmentCompletion
entryRuleAssignmentCompletion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentCompletionRule(), currentNode); }
	 iv_ruleAssignmentCompletion=ruleAssignmentCompletion 
	 { $current=$iv_ruleAssignmentCompletion.current; } 
	 EOF 
;

// Rule AssignmentCompletion
ruleAssignmentCompletion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentCompletionAccess().getOpAssignmentOperatorEnumRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"AssignmentOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentCompletionAccess().getRightHandSideExpressionParserRuleCall_1_0(), currentNode); 
	    }
		lv_rightHandSide_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentCompletionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rightHandSide",
	        		lv_rightHandSide_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Rule ParameterDirection
ruleParameterDirection returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'in' 
	{
        $current = grammarAccess.getParameterDirectionAccess().getINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getParameterDirectionAccess().getINEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'out' 
	{
        $current = grammarAccess.getParameterDirectionAccess().getOUTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getParameterDirectionAccess().getOUTEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'inout' 
	{
        $current = grammarAccess.getParameterDirectionAccess().getINOUTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getParameterDirectionAccess().getINOUTEnumLiteralDeclaration_2(), null); 
    }
));



// Rule BooleanValue
ruleBooleanValue returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'true' 
	{
        $current = grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBooleanValueAccess().getTRUEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'false' 
	{
        $current = grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getBooleanValueAccess().getFALSEEnumLiteralDeclaration_1(), null); 
    }
));



// Rule LinkOperationKind
ruleLinkOperationKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'createLink' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getCREATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getLinkOperationKindAccess().getCREATEEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'destroyLink' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getDESTROYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getLinkOperationKindAccess().getDESTROYEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'clearAssoc' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getCLEAREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getLinkOperationKindAccess().getCLEAREnumLiteralDeclaration_2(), null); 
    }
)
    |(	'destroy' 
	{
        $current = grammarAccess.getLinkOperationKindAccess().getDESTROY_OBJECTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getLinkOperationKindAccess().getDESTROY_OBJECTEnumLiteralDeclaration_3(), null); 
    }
));



// Rule SelectOrRejectOperator
ruleSelectOrRejectOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'select' 
	{
        $current = grammarAccess.getSelectOrRejectOperatorAccess().getSELECTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectOrRejectOperatorAccess().getSELECTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'reject' 
	{
        $current = grammarAccess.getSelectOrRejectOperatorAccess().getREJECTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getSelectOrRejectOperatorAccess().getREJECTEnumLiteralDeclaration_1(), null); 
    }
));



// Rule CollectOrIterateOperator
ruleCollectOrIterateOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'collect' 
	{
        $current = grammarAccess.getCollectOrIterateOperatorAccess().getCOLLECTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCollectOrIterateOperatorAccess().getCOLLECTEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'iterate' 
	{
        $current = grammarAccess.getCollectOrIterateOperatorAccess().getITERATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getCollectOrIterateOperatorAccess().getITERATEEnumLiteralDeclaration_1(), null); 
    }
));



// Rule ForAllOrExistsOrOneOperator
ruleForAllOrExistsOrOneOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'forAll' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getFORALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperatorAccess().getFORALLEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'exists' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getEXISTSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperatorAccess().getEXISTSEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'one' 
	{
        $current = grammarAccess.getForAllOrExistsOrOneOperatorAccess().getONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getForAllOrExistsOrOneOperatorAccess().getONEEnumLiteralDeclaration_2(), null); 
    }
));



// Rule AnnotationKind
ruleAnnotationKind returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'isolated' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getISOLATEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAnnotationKindAccess().getISOLATEDEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'determined' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getDETERMINEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAnnotationKindAccess().getDETERMINEDEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'assured' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getASSUREDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAnnotationKindAccess().getASSUREDEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'parallel' 
	{
        $current = grammarAccess.getAnnotationKindAccess().getPARALLELEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAnnotationKindAccess().getPARALLELEnumLiteralDeclaration_3(), null); 
    }
));



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { setCurrentLookahead(); resetLookahead(); }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getASSIGNEnumLiteralDeclaration_0(), null); 
    }
)
    |(	'+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getPLUSASSIGNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getPLUSASSIGNEnumLiteralDeclaration_1(), null); 
    }
)
    |(	'-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMINUSASSIGNEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getMINUSASSIGNEnumLiteralDeclaration_2(), null); 
    }
)
    |(	'*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMULTASSIGNEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getMULTASSIGNEnumLiteralDeclaration_3(), null); 
    }
)
    |(	'%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMODASSIGNEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getMODASSIGNEnumLiteralDeclaration_4(), null); 
    }
)
    |(	'/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDIVASSIGNEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getDIVASSIGNEnumLiteralDeclaration_5(), null); 
    }
)
    |(	'&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getANDASSIGNEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getANDASSIGNEnumLiteralDeclaration_6(), null); 
    }
)
    |(	'|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getORASSIGNEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getORASSIGNEnumLiteralDeclaration_7(), null); 
    }
)
    |(	'^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getXORASSIGNEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getXORASSIGNEnumLiteralDeclaration_8(), null); 
    }
)
    |(	'<<=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getLSHIFTASSIGNEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getLSHIFTASSIGNEnumLiteralDeclaration_9(), null); 
    }
)
    |(	'>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getRSHIFTASSIGNEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getRSHIFTASSIGNEnumLiteralDeclaration_10(), null); 
    }
)
    |(	'>>>=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getURSHIFTASSIGNEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        createLeafNode(grammarAccess.getAssignmentOperatorAccess().getURSHIFTASSIGNEnumLiteralDeclaration_11(), null); 
    }
));



RULE_INTEGERVALUE : (('0'|'1'..'9' ('_'? '0'..'9')*)|('0b'|'0B') '0'..'1' ('_'? '0'..'1')*|('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F') ('_'? ('0'..'9'|'a'..'f'|'A'..'F'))*|'0' '_'? '0'..'7' ('_'? '0'..'7')*);

RULE_IMPORT_ID : 'import' RULE_WS ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ('.' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*)*;

RULE_ID : (('a'..'z'|'A'..'Z'|'_'|'"') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'"')*|'\'' ( options {greedy=false;} : . )*'\'');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_ML_COMMENT : '/*' ~('@')* '*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'|'@'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_INT : ('0'..'9')+;

RULE_ANY_OTHER : .;


